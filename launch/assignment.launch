<?xml version="1.0"?>
<launch>

    <include file="$(find ExpRoLab_Assignment2)/launch/simulation_gmapping.launch"/>
    <include file="$(find ExpRoLab_Assignment2)/launch/move_base.launch"/>
    <include file="$(find ExpRoLab_Assignment2)/launch/architecture.launch"/>

    <arg name="model" default="$(find ExpRoLab_Assignment2)/urdf/robot_assignment.xacro"/>

	<!-- these are the arguments you can pass this launch file, for example paused:=true -->
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="extra_gazebo_args" default=""/>
    <arg name="gui" default="true"/>
    <arg name="recording" default="false"/>
    <arg name="world" default="assignment_world" />
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>
    <arg name="physics" default="ode"/>
    <arg name="verbose" default="false"/>
    <arg name="world_name" value="$(find ExpRoLab_Assignment2)/worlds/$(arg world).world"/>
    <arg name="respawn_gazebo" default="false"/>
    <arg name="use_clock_frequency" default="false"/>
    <arg name="pub_clock_frequency" default="100"/>

    <!-- set use_sim_time flag -->
    <param name="/use_sim_time" value="$(arg use_sim_time)"/>

    <!-- set command arguments -->
    <arg unless="$(arg paused)" name="command_arg1" value=""/>
    <arg     if="$(arg paused)" name="command_arg1" value="-u"/>
    <arg unless="$(arg recording)" name="command_arg2" value=""/>
    <arg     if="$(arg recording)" name="command_arg2" value="-r"/>
    <arg unless="$(arg verbose)" name="command_arg3" value=""/>
    <arg     if="$(arg verbose)" name="command_arg3" value="--verbose"/>
    <arg unless="$(arg debug)" name="script_type" value="gzserver"/>
    <arg     if="$(arg debug)" name="script_type" value="debug"/>

    <!-- start Rviz --> 
    <node name="rviz" pkg="rviz" type="rviz" required="true" args="-d $(find ExpRoLab_Assignment2)/config/rviz/start.rviz"/>

    <!-- launch the nodes for the robot model -->
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
        <remap from="joint_states" to="/robot_assignment/joint_states"/>
    </node>

    <!-- start gazebo server-->
    <group if="$(arg use_clock_frequency)">
        <param name="gazebo/pub_clock_frequency" value="$(arg pub_clock_frequency)" />
    </group>
    <node name="gazebo" pkg="gazebo_ros" type="$(arg script_type)" respawn="$(arg respawn_gazebo)" output="screen"
        args="$(arg command_arg1) $(arg command_arg2) $(arg command_arg3) -e $(arg physics) $(arg extra_gazebo_args) $(arg world_name)" />
        
    <!-- start gazebo client -->
    <group if="$(arg gui)">
        <node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen"/>
    </group>

    <!-- Load the URDF into the ROS Parameter Server -->
    <param name="robot_description" command="$(find xacro)/xacro --inorder $(arg model)"/>
        
    <!-- Launch the server nodes -->
    <node name="marker_server" pkg="ExpRoLab_Assignment2" type="marker_server" />
    <node name="load_map_service" pkg="ExpRoLab_Assignment2" type="load_ontology.py" output="screen" launch-prefix="xterm -fa 'Monospace' -fs 10 -e"/>

    <!-- Launch the node to detect the markers -->
    <rosparam param="config/floor_markers"> 4 </rosparam>
    <rosparam param="config/ceil_markers"> 3 </rosparam>
    <node name="detect_marker" pkg="ExpRoLab_Assignment2" type="detect_marker" output="screen" launch-prefix="xterm -fa 'Monospace' -fs 10 -e" />

    <!--Run a python script to send a servicec all to gazebo_ros to spawn a URDF robot -->
    <!-- Coordinates to spawn model -->
    <arg name="x" default="-6.0"/>
    <arg name="y" default="11.0"/>
    <arg name="z" default="0.15"/>
    <arg name="roll" default="0.0"/>
    <arg name="pitch" default="0.0"/>
    <arg name="yaw" default="0.0"/>
    <arg name="output" default="log"/>
    <!-- URDF spawner node-->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" 
    args="-urdf -model robot1 -param robot_description -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)"/>

    <!-- Configuration of the motors -->
    <rosparam file="$(find ExpRoLab_Assignment2)/config/motors_config.yaml" command="load" ns="/robot_assignment" />

    <!-- Controller spawner node -->
    <node name="controller_spawner" pkg="controller_manager" type="spawner" output="screen" args="--namespace=/robot_assignment
        joint_state_controller
        joint1_position_controller
        joint2_position_controller
        joint3_position_controller
        --shutdown-timeout 3">
    </node>

</launch>